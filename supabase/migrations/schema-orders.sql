-- Create the orders table
CREATE TABLE orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id),
    total_amount NUMERIC(10, 2) NOT NULL,
    status TEXT DEFAULT 'pending' NOT NULL, -- e.g., pending, processing, shipped, delivered, cancelled
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    stripe_session_id TEXT UNIQUE
);

-- Create the order_items table
CREATE TABLE order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT REFERENCES orders(id) ON DELETE CASCADE NOT NULL,
    product_id BIGINT REFERENCES products(id) NOT NULL,
    quantity INT NOT NULL,
    price NUMERIC(10, 2) NOT NULL -- Price at the time of purchase
);

-- Add RLS policies for orders
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own orders" ON orders
    FOR SELECT USING (auth.uid() = user_id);

-- Add RLS policies for order_items
ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view items in their own orders" ON order_items
    FOR SELECT USING (EXISTS (
        SELECT 1 FROM orders WHERE orders.id = order_items.order_id AND orders.user_id = auth.uid()
    ));

-- Allow admin access (assuming you have a way to identify admins, e.g., a custom claim)
-- This is a placeholder. You'll need a proper role management system for production.
-- CREATE POLICY "Admins can access all orders" ON orders FOR ALL USING (is_admin());
-- CREATE POLICY "Admins can access all order items" ON order_items FOR ALL USING (is_admin());
