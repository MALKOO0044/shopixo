-- Consolidated migrations for quick execution in Supabase SQL Editor

-- 0000_schema-products.sql
create table if not exists products (
    id bigint generated by default as identity primary key,
    title text not null,
    slug text not null unique,
    description text,
    price numeric(10,2) not null,
    images text[] not null default '{}',
    category text not null default 'General',
    rating numeric(3,2) not null default 0,
    stock integer not null default 0 check (stock >= 0),
    variants jsonb not null default '[]'::jsonb,
    created_at timestamptz not null default now()
);

alter table products enable row level security;
drop policy if exists "Public can read products" on products;
create policy "Public can read products" on products
    for select using (true);
drop policy if exists "Service role can manage products" on products;
create policy "Service role can manage products" on products
    for all using (auth.role() = 'service_role') with check (auth.role() = 'service_role');

-- 0001_schema-cart.sql
create extension if not exists pgcrypto;

create table if not exists cart_sessions (
    id uuid primary key default gen_random_uuid(),
    user_id uuid references auth.users(id) on delete set null,
    created_at timestamptz not null default now()
);

alter table cart_sessions enable row level security;
drop policy if exists "Service role can manage cart sessions" on cart_sessions;
create policy "Service role can manage cart sessions" on cart_sessions
    for all using (auth.role() = 'service_role') with check (auth.role() = 'service_role');

create table if not exists cart_items (
    id bigint generated by default as identity primary key,
    session_id uuid not null references cart_sessions(id) on delete cascade,
    product_id bigint not null references products(id) on delete restrict,
    quantity integer not null check (quantity > 0),
    created_at timestamptz not null default now()
);

create index if not exists idx_cart_items_session_id on cart_items(session_id);
create index if not exists idx_cart_items_product_id on cart_items(product_id);

alter table cart_items enable row level security;
drop policy if exists "Service role can manage cart items" on cart_items;
create policy "Service role can manage cart items" on cart_items
    for all using (auth.role() = 'service_role') with check (auth.role() = 'service_role');

-- 0002_rpc-decrement_stock.sql
create or replace function decrement_stock(product_id_in bigint, quantity_in integer)
returns void
language plpgsql
security definer
as $$
begin
  update products
    set stock = greatest(0, stock - quantity_in)
  where id = product_id_in;
end;
$$;

-- CJ fulfillment and tracking fields on orders (idempotent)
alter table if exists public.orders add column if not exists cj_order_no text null;
alter table if exists public.orders add column if not exists shipping_status text null;
alter table if exists public.orders add column if not exists tracking_number text null;
alter table if exists public.orders add column if not exists carrier text null;

create index if not exists idx_orders_cj_order_no on public.orders(cj_order_no);
create index if not exists idx_orders_shipping_status on public.orders(shipping_status);
create index if not exists idx_orders_tracking_number on public.orders(tracking_number);

-- Ensure products carry publishing state and optional owner (align with baseline schema)
alter table if exists public.products add column if not exists is_active boolean not null default true;
alter table if exists public.products add column if not exists user_id uuid null;

create index if not exists idx_products_is_active on public.products(is_active);
create index if not exists idx_products_category on public.products(category);

-- schema-orders (create tables if missing before policies)
create table if not exists orders (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users(id),
    total_amount numeric(10, 2) not null,
    status text default 'pending' not null,
    created_at timestamptz default now() not null,
    stripe_session_id text unique
);

create table if not exists order_items (
    id bigint generated by default as identity primary key,
    order_id bigint references orders(id) on delete cascade not null,
    product_id bigint references products(id) not null,
    quantity int not null,
    price numeric(10, 2) not null
);

-- 0003_orders-policies.sql
alter table orders enable row level security;
drop policy if exists "Service role can manage orders" on orders;
create policy "Service role can manage orders" on orders
  for all using (auth.role() = 'service_role') with check (auth.role() = 'service_role');
drop policy if exists "Users can view their own orders" on orders;
create policy "Users can view their own orders" on orders
  for select using (auth.uid() = user_id);

alter table order_items enable row level security;
drop policy if exists "Service role can manage order items" on order_items;
create policy "Service role can manage order items" on order_items
  for all using (auth.role() = 'service_role') with check (auth.role() = 'service_role');
drop policy if exists "Users can view items in their own orders" on order_items;
create policy "Users can view items in their own orders" on order_items
  for select using (exists (
    select 1 from orders where orders.id = order_items.order_id and orders.user_id = auth.uid()
  ));

-- 0004_rpc-decrement_stock-hardened.sql
create or replace function public.decrement_stock(product_id_in bigint, quantity_in integer)
returns void
language plpgsql
security definer
set search_path = public
as $$
begin
  if quantity_in is null or quantity_in <= 0 then
    return;
  end if;

  update products
    set stock = greatest(0, stock - quantity_in)
  where id = product_id_in;
end;
$$;
