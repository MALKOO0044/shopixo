-- Cart schema
-- Requires pgcrypto for gen_random_uuid()
create extension if not exists pgcrypto;

create table if not exists cart_sessions (
    id uuid primary key default gen_random_uuid(),
    user_id uuid references auth.users(id) on delete set null,
    created_at timestamptz not null default now()
);

alter table cart_sessions enable row level security;

-- Restrict all access to service role (server-only operations)
drop policy if exists "Service role can manage cart sessions" on cart_sessions;
create policy "Service role can manage cart sessions" on cart_sessions
    for all using (auth.role() = 'service_role') with check (auth.role() = 'service_role');

create table if not exists cart_items (
    id bigint generated by default as identity primary key,
    session_id uuid not null references cart_sessions(id) on delete cascade,
    product_id bigint not null references products(id) on delete restrict,
    quantity integer not null check (quantity > 0),
    created_at timestamptz not null default now()
);

create index if not exists idx_cart_items_session_id on cart_items(session_id);
create index if not exists idx_cart_items_product_id on cart_items(product_id);

alter table cart_items enable row level security;

-- Restrict all access to service role (server-only operations)
drop policy if exists "Service role can manage cart items" on cart_items;
create policy "Service role can manage cart items" on cart_items
    for all using (auth.role() = 'service_role') with check (auth.role() = 'service_role');
